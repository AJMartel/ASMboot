; AsciiToBin2
; konvertiert einen Dezimalzahl in ASCII ab (Z) in eine 16-bit Binärzahl in R3:R2
; Flag "T" ist "1" bei einem Fehler, (Z) zeigt auf das Zeichen, dass den Fehler verursacht hat,
; oder hinter die letzte (gültige) Ziffer

.def ZL=R30
.def ZH=R31
.def prodL=R0		; Produkt des mul-Befehls
.def prodH=R1
.def binResL=R2		; binary Result
.def binResH=R3
.def readChar=R16
.def zehn=R17
.def null=R18
/*
.cseg
.org 0000

	rjmp main
*/
main:
	ldi ZL,LOW(Zahl)
	ldi ZH,HIGH(Zahl)
	ldi zehn,10
	ldi null,0

AscToBin2:
	eor binResH,binResH	; gleicher Op-code für
	clr binResL			; 'eor' und 'clr'
	clt

AscToBin2a:
	ld  readChar,Z+
	subi readChar,' '
	breq AscToBin2a		; übergehe Leerzeichen
	subi readChar,0x10
	breq AscToBin2a		; übergehe führende Nullen
	brcs AscToBin2c		; Zeichen ist kleiner als '0' -> keine Zahl

	cpi readChar,10
	brcc AscToBin2c		; keine Dezimalziffer

	mov binResL,readChar ; erste Ziffer einfach übernehmen

	ld readChar,Z+		; zweite Ziffer holen

	subi readChar,'0'
	brcs AscToBin2d		; Endezeichen

	cpi readChar,10
	brcc AscToBin2c		; keine Dezimalziffer

	mul binResL,zehn	; zweite Ziffer passt ins LOW-Byte -> *10
	mov binResL,prodL
	add binResL,readChar

	ld readChar,Z+		; dritte Ziffer holen
AscToBin2b:
	subi readChar,'0'
	brcs AscToBin2d		; Endezeichen

	cpi readChar,10
	brcc AscToBin2c		; keine Dezimalziffer

	mul binResH,zehn	; bisheriges Ergebnis *10
	cp prodH,null
	brne AscToBin2Overflow
	mov binResH,prodL
	mul binResL,zehn
	mov binResL,prodL
	add binResH,prodH

	add binResL,readChar ; nächste Stelle als Einer dazuaddieren
	adc binResH,null
	brcs AscToBin2Overflow
	ld readChar,Z+		; weiter mit dem nächsten Zeichen
	rjmp AscToBin2b	

AscToBin2c:
AscToBin2Overflow:		; Overflow - größer als 0xFFFF oder keine Zahl
	sbiw z,1
	set					; T-Flag für Fehler
	ret	

AscToBin2d:				; erfolgreich
	sbiw z,1			; Binärzahl in R3:R2
	clt					; T-Flag löschen für fehlerfrei
	ret



.dseg
.org 0x0100
Zahl:
.db "65535",0


